apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: lens-metrics
  
  resourceVersion: '3166'
  creationTimestamp: '2022-05-27T05:56:35Z'
  labels:
    app.kubernetes.io/created-by: resource-stack
    app.kubernetes.io/managed-by: Lens
    app.kubernetes.io/name: lens-metrics
  # annotations:
  #   kubectl.kubernetes.io/last-applied-configuration: >
  #     {"apiVersion":"v1","data":{"prometheus.yaml":"# Global config\nglobal:\n 
  #     scrape_interval: 15s\n\n\n# Scrape configs for running Prometheus on a
  #     Kubernetes cluster.\n# This uses separate scrape configs for cluster
  #     components (i.e. API server, node)\n# and services to allow each to use
  #     different authentication configs.\n#\n# Kubernetes labels will be added as
  #     Prometheus labels on metrics via the\n# `labelmap` relabeling
  #     action.\nscrape_configs:\n\n# Scrape config for API servers.\n#\n#
  #     Kubernetes exposes API servers as endpoints to the default/kubernetes\n#
  #     service so this uses `endpoints` role and uses relabelling to only keep\n#
  #     the endpoints associated with the default/kubernetes service using the\n#
  #     default named port `https`. This works for single API server deployments
  #     as\n# well as HA API server deployments.\n- job_name:
  #     'kubernetes-apiservers'\n  kubernetes_sd_configs:\n  - role:
  #     endpoints\n\n  scheme: https\n  tls_config:\n    ca_file:
  #     /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    # Using
  #     endpoints to discover kube-apiserver targets finds the pod IP\n    # (host
  #     IP since apiserver uses host network) which is not used in\n    # the
  #     server certificate.\n    insecure_skip_verify: true\n  bearer_token_file:
  #     /var/run/secrets/kubernetes.io/serviceaccount/token\n\n  # Keep only the
  #     default/kubernetes service endpoints for the https port. This\n  # will
  #     add targets for each API server which Kubernetes adds an endpoint to\n  #
  #     the default/kubernetes service.\n  relabel_configs:\n  - source_labels:
  #     [__meta_kubernetes_namespace, __meta_kubernetes_service_name,
  #     __meta_kubernetes_endpoint_port_name]\n    action: keep\n    regex:
  #     default;kubernetes;https\n  - replacement: apiserver\n    action:
  #     replace\n    target_label: job\n\n# Scrape config for node (i.e. kubelet)
  #     /metrics (e.g. 'kubelet_'). Explore\n# metrics from a node by scraping
  #     kubelet (127.0.0.1:10250/metrics).\n- job_name: 'kubelet'\n 
  #     kubernetes_sd_configs:\n  - role: node\n\n  scheme: https\n 
  #     tls_config:\n    ca_file:
  #     /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    # Kubelet certs
  #     don't have any fixed IP SANs\n    insecure_skip_verify: true\n 
  #     bearer_token_file:
  #     /var/run/secrets/kubernetes.io/serviceaccount/token\n\n 
  #     relabel_configs:\n  - action: labelmap\n    regex:
  #     __meta_kubernetes_node_label_(.+)\n  - replacement: 'lens-metrics'\n   
  #     target_label: kubernetes_namespace\n\n  metric_relabel_configs:\n  -
  #     source_labels:\n      - namespace\n    action: replace\n    regex:
  #     (.+)\n    target_label: kubernetes_namespace\n\n# Scrape config for
  #     Kubelet cAdvisor. Explore metrics from a node by\n# scraping kubelet
  #     (127.0.0.1:10250/metrics/cadvisor).\n- job_name: 'kubernetes-cadvisor'\n 
  #     kubernetes_sd_configs:\n  - role: node\n\n  scheme: https\n  metrics_path:
  #     /metrics/cadvisor\n  tls_config:\n    # Kubelet certs don't have any fixed
  #     IP SANs\n    insecure_skip_verify: true\n    ca_file:
  #     /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n  bearer_token_file:
  #     /var/run/secrets/kubernetes.io/serviceaccount/token\n\n 
  #     relabel_configs:\n  - action: labelmap\n    regex:
  #     __meta_kubernetes_node_label_(.+)\n  metric_relabel_configs:\n  -
  #     source_labels:\n      - namespace\n    action: replace\n    target_label:
  #     kubernetes_namespace\n  - source_labels:\n    - pod\n    regex: (.*)\n   
  #     replacement: $1\n    action: replace\n    target_label: pod_name\n  -
  #     source_labels:\n    - container\n    regex: (.*)\n    replacement: $1\n   
  #     action: replace\n    target_label: container_name\n\n# Scrap etcd metrics
  #     from masters via etcd-scraper-proxy\n- job_name: 'etcd'\n 
  #     kubernetes_sd_configs:\n  - role: pod\n  scheme: http\n 
  #     relabel_configs:\n    - source_labels:
  #     [__meta_kubernetes_namespace]\n      action: keep\n      regex:
  #     'kube-system'\n    - source_labels:
  #     [__meta_kubernetes_pod_label_component]\n      action: keep\n      regex:
  #     'etcd-scraper-proxy'\n    - action: labelmap\n      regex:
  #     __meta_kubernetes_pod_label_(.+)\n\n# Scrape config for service
  #     endpoints.\n#\n# The relabeling allows the actual service scrape endpoint
  #     to be configured\n# via the following annotations:\n#\n# *
  #     `prometheus.io/scrape`: Only scrape services that have a value of
  #     `true`\n# * `prometheus.io/scheme`: If the metrics endpoint is secured
  #     then you will need\n# to set this to `https` \u0026 most likely set the
  #     `tls_config` of the scrape config.\n# * `prometheus.io/path`: If the
  #     metrics path is not `/metrics` override this.\n# * `prometheus.io/port`:
  #     If the metrics are exposed on a different port to the\n# service then set
  #     this appropriately.\n- job_name: 'kubernetes-service-endpoints'\n\n 
  #     kubernetes_sd_configs:\n  - role: endpoints\n    namespaces:\n     
  #     names:\n        - lens-metrics\n\n  relabel_configs:\n  - source_labels:
  #     [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n    action:
  #     keep\n    regex: true\n  - source_labels:
  #     [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n    action:
  #     replace\n    target_label: __scheme__\n    regex: (https?)\n  -
  #     source_labels:
  #     [__meta_kubernetes_service_annotation_prometheus_io_path]\n    action:
  #     replace\n    target_label: __metrics_path__\n    regex: (.+)\n  -
  #     source_labels: [__address__,
  #     __meta_kubernetes_service_annotation_prometheus_io_port]\n    action:
  #     replace\n    target_label: __address__\n    regex:
  #     ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n  - action:
  #     labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  -
  #     source_labels: [__meta_kubernetes_service_name]\n    action: replace\n   
  #     target_label: job\n  - action: replace\n    source_labels:\n    -
  #     __meta_kubernetes_pod_node_name\n    target_label: kubernetes_node\n  -
  #     source_labels: [__meta_kubernetes_namespace]\n    action: replace\n   
  #     target_label: kubernetes_namespace\n  metric_relabel_configs:\n  -
  #     source_labels:\n      - namespace\n    action: replace\n    regex:
  #     (.+)\n    target_label: kubernetes_namespace\n\n# Example scrape config
  #     for probing services via the Blackbox Exporter.\n#\n# The relabeling
  #     allows the actual service scrape endpoint to be configured\n# via the
  #     following annotations:\n#\n# * `prometheus.io/probe`: Only probe services
  #     that have a value of `true`\n- job_name: 'kubernetes-services'\n\n 
  #     metrics_path: /probe\n  params:\n    module: [http_2xx]\n\n 
  #     kubernetes_sd_configs:\n  - role: service\n    namespaces:\n     
  #     names:\n        - lens-metrics\n\n  relabel_configs:\n  - source_labels:
  #     [__meta_kubernetes_service_annotation_prometheus_io_probe]\n    action:
  #     keep\n    regex: true\n  - source_labels: [__address__]\n    target_label:
  #     __param_target\n  - target_label: __address__\n    replacement:
  #     blackbox\n  - source_labels: [__param_target]\n    target_label:
  #     instance\n  - action: labelmap\n    regex:
  #     __meta_kubernetes_service_label_(.+)\n  - source_labels:
  #     [__meta_kubernetes_service_name]\n    target_label: job\n 
  #     metric_relabel_configs:\n  - source_labels:\n      - namespace\n   
  #     action: replace\n    regex: (.+)\n    target_label:
  #     kubernetes_namespace\n\n# Example scrape config for pods\n#\n# The
  #     relabeling allows the actual pod scrape endpoint to be configured via
  #     the\n# following annotations:\n#\n# * `prometheus.io/scrape`: Only scrape
  #     pods that have a value of `true`\n# * `prometheus.io/path`: If the metrics
  #     path is not `/metrics` override this.\n# * `prometheus.io/port`: Scrape
  #     the pod on the indicated port instead of the\n# pod's declared ports
  #     (default is a port-free target if none are declared).\n- job_name:
  #     'kubernetes-pods'\n\n  kubernetes_sd_configs:\n  - role: pod\n   
  #     namespaces:\n      names:\n        - lens-metrics\n\n  relabel_configs:\n 
  #     - source_labels:
  #     [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n    action:
  #     keep\n    regex: true\n  - source_labels:
  #     [__meta_kubernetes_pod_annotation_prometheus_io_path]\n    action:
  #     replace\n    target_label: __metrics_path__\n    regex: (.+)\n  -
  #     source_labels: [__address__,
  #     __meta_kubernetes_pod_annotation_prometheus_io_port]\n    action:
  #     replace\n    regex: ([^:]+)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n   
  #     target_label: __address__\n  - action: labelmap\n    regex:
  #     __meta_kubernetes_pod_label_(.+)\n  - source_labels:
  #     [__meta_kubernetes_namespace]\n    action: replace\n    target_label:
  #     kubernetes_namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n   
  #     action: replace\n    target_label: kubernetes_pod_name\n 
  #     metric_relabel_configs:\n  - source_labels:\n      - namespace\n   
  #     action: replace\n    regex: (.+)\n    target_label:
  #     kubernetes_namespace\n\n# Rule files\nrule_files:\n  -
  #     \"/etc/prometheus/rules/*.rules\"\n  - \"/etc/prometheus/rules/*.yaml\"\n 
  #     -
  #     \"/etc/prometheus/rules/*.yml\""},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"app.kubernetes.io/created-by":"resource-stack","app.kubernetes.io/managed-by":"Lens","app.kubernetes.io/name":"lens-metrics"},"name":"prometheus-config","namespace":"lens-metrics"}}
  managedFields:
    - manager: kubectl-client-side-apply
      operation: Update
      apiVersion: v1
      time: '2022-05-27T05:56:35Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:prometheus.yaml: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/created-by: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
  selfLink: /api/v1/namespaces/lens-metrics/configmaps/prometheus-config
data:
  prometheus.yaml: >-
    # Global config

    global:
      scrape_interval: 15s
    alerting:
      alertmanagers:
      - static_configs:
        - targets: ['alertmanager-svc.lens-metrics.svc:9093']



    # Scrape configs for running Prometheus on a Kubernetes cluster.

    # This uses separate scrape configs for cluster components (i.e. API server,
    node)

    # and services to allow each to use different authentication configs.

    #

    # Kubernetes labels will be added as Prometheus labels on metrics via the

    # `labelmap` relabeling action.

    scrape_configs:


    # Scrape config for API servers.

    #

    # Kubernetes exposes API servers as endpoints to the default/kubernetes

    # service so this uses `endpoints` role and uses relabelling to only keep

    # the endpoints associated with the default/kubernetes service using the

    # default named port `https`. This works for single API server deployments
    as

    # well as HA API server deployments.

    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints

      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # Using endpoints to discover kube-apiserver targets finds the pod IP
        # (host IP since apiserver uses host network) which is not used in
        # the server certificate.
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # Keep only the default/kubernetes service endpoints for the https port. This
      # will add targets for each API server which Kubernetes adds an endpoint to
      # the default/kubernetes service.
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
      - replacement: apiserver
        action: replace
        target_label: job

    # Scrape config for node (i.e. kubelet) /metrics (e.g. 'kubelet_'). Explore

    # metrics from a node by scraping kubelet (127.0.0.1:10250/metrics).

    - job_name: 'kubelet'
      kubernetes_sd_configs:
      - role: node

      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # Kubelet certs don't have any fixed IP SANs
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: 'lens-metrics'
        target_label: kubernetes_namespace

      metric_relabel_configs:
      - source_labels:
          - namespace
        action: replace
        regex: (.+)
        target_label: kubernetes_namespace

    # Scrape config for Kubelet cAdvisor. Explore metrics from a node by

    # scraping kubelet (127.0.0.1:10250/metrics/cadvisor).

    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node

      scheme: https
      metrics_path: /metrics/cadvisor
      tls_config:
        # Kubelet certs don't have any fixed IP SANs
        insecure_skip_verify: true
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      metric_relabel_configs:
      - source_labels:
          - namespace
        action: replace
        target_label: kubernetes_namespace
      - source_labels:
        - pod
        regex: (.*)
        replacement: $1
        action: replace
        target_label: pod_name
      - source_labels:
        - container
        regex: (.*)
        replacement: $1
        action: replace
        target_label: container_name

    # Scrap etcd metrics from masters via etcd-scraper-proxy

    - job_name: 'etcd'
      kubernetes_sd_configs:
      - role: pod
      scheme: http
      relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          action: keep
          regex: 'kube-system'
        - source_labels: [__meta_kubernetes_pod_label_component]
          action: keep
          regex: 'etcd-scraper-proxy'
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)

    # Scrape config for service endpoints.

    #

    # The relabeling allows the actual service scrape endpoint to be configured

    # via the following annotations:

    #

    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`

    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will
    need

    # to set this to `https` & most likely set the `tls_config` of the scrape
    config.

    # * `prometheus.io/path`: If the metrics path is not `/metrics` override
    this.

    # * `prometheus.io/port`: If the metrics are exposed on a different port to
    the

    # service then set this appropriately.

    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - lens-metrics

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      metric_relabel_configs:
      - source_labels:
          - namespace
        action: replace
        regex: (.+)
        target_label: kubernetes_namespace

    # Example scrape config for probing services via the Blackbox Exporter.

    #

    # The relabeling allows the actual service scrape endpoint to be configured

    # via the following annotations:

    #

    # * `prometheus.io/probe`: Only probe services that have a value of `true`

    - job_name: 'kubernetes-services'

      metrics_path: /probe
      params:
        module: [http_2xx]

      kubernetes_sd_configs:
      - role: service
        namespaces:
          names:
            - lens-metrics

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
        action: keep
        regex: true
      - source_labels: [__address__]
        target_label: __param_target
      - target_label: __address__
        replacement: blackbox
      - source_labels: [__param_target]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_service_name]
        target_label: job
      metric_relabel_configs:
      - source_labels:
          - namespace
        action: replace
        regex: (.+)
        target_label: kubernetes_namespace

    # Example scrape config for pods

    #

    # The relabeling allows the actual pod scrape endpoint to be configured via
    the

    # following annotations:

    #

    # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`

    # * `prometheus.io/path`: If the metrics path is not `/metrics` override
    this.

    # * `prometheus.io/port`: Scrape the pod on the indicated port instead of
    the

    # pod's declared ports (default is a port-free target if none are declared).

    - job_name: 'kubernetes-pods'

      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - lens-metrics

      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      metric_relabel_configs:
      - source_labels:
          - namespace
        action: replace
        regex: (.+)
        target_label: kubernetes_namespace

    # Rule files

    rule_files:
      - "/etc/prometheus/rules/*.rules"
      - "/etc/prometheus/rules/*.yaml"
      - "/etc/prometheus/rules/*.yml"
